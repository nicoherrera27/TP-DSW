---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/astro/Header.astro';
import { tmdbService } from '../../services/tmdbService';
import type { TMDBVideo } from '../../types/movies';

export const prerender = false;

const { id } = Astro.params;
if (!id) {
  return Astro.redirect('/404');
}

const movie = await tmdbService.getMovieDetails(Number(id));
const videosResponse = await tmdbService.getMovieVideos(Number(id));
const trailer =
  videosResponse.results.find(
    (video: TMDBVideo) =>
      video.site === 'YouTube' && video.type === 'Trailer' && video.official
  ) ||
  videosResponse.results.find(
    (video: TMDBVideo) => video.site === 'YouTube' && video.type === 'Trailer'
  );
const posterUrl = movie.poster_path
  ? tmdbService.getImageUrl(movie.poster_path)
  : '/placeholder-movie.png';
const backdropUrl = movie.backdrop_path
  ? tmdbService.getImageUrl(movie.backdrop_path, 'large')
  : '';

let groupedShows: { [key: string]: string[] } = {};
try {
  const showsResponse = await fetch(
    `http://localhost:3000/api/show/by-movie/${id}`
  );
  if (showsResponse.ok) {
    const showsData = await showsResponse.json();

    showsData.data.forEach((show: any) => {
      if (show.timetables && show.timetables.length > 0) {
        const groupKey = `${show.showCat.description} - ${show.variant}`;
        if (!groupedShows[groupKey]) {
          groupedShows[groupKey] = [];
        }
        show.timetables.forEach((tt: any) =>
          groupedShows[groupKey].push(tt.time.substring(0, 5))
        );
      }
    });
  }
} catch (error) {
  console.error('Error fetching shows:', error);
}
---

<Layout title={movie.title}>
  <Header />
  <div
    class="backdrop"
    style={`background-image: linear-gradient(to right, rgba(10, 25, 41, 1) 20%, rgba(10, 25, 41, 0.7) 50%, rgba(10, 25, 41, 1) 100%), url(${backdropUrl})`}
  >
  </div>
  <main class="movie-detail-container">
    <div class="detail-grid">
      <div class="main-content">
        <h1>{movie.title}</h1>
        <div class="meta-info">
          <span>{movie.runtime} min</span><span>•</span>
          <span>{movie.genres.map((g) => g.name).join(', ')}</span><span>•</span
          >
          <span>{new Date(movie.release_date).getFullYear()}</span>
        </div>
        <p class="synopsis">{movie.overview}</p>

        {
          trailer && (
            <div class="trailer-container">
              <h3>Trailer Oficial</h3>
              <iframe
                src={`https://www.youtube.com/embed/${trailer.key}`}
                title="YouTube video player"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen
              />
            </div>
          )
        }
      </div>

      <aside class="sidebar-content">
        <img
          src={posterUrl}
          alt={`Póster de ${movie.title}`}
          class="detail-poster"
        />
        <div class="data-sheet">
          <h4>Ficha Técnica</h4>
          <ul>
            <li><strong>Título Original:</strong> {movie.original_title}</li>
            <li>
              <strong>Estreno:</strong>
              {
                new Date(movie.release_date).toLocaleDateString('es-AR', {
                  timeZone: 'UTC',
                })
              }
            </li>
            <li><strong>Duración:</strong> {movie.runtime} min</li>
            <li>
              <strong>Calificación:</strong>
              {movie.vote_average.toFixed(1)} / 10
            </li>
          </ul>
        </div>
      </aside>
    </div>

    <div class="showtimes-container">
      <h2>Horarios Disponibles</h2>
      {
        Object.keys(groupedShows).length > 0 ? (
          <div class="cinema-section">
            <h3>CineVerse Rosario</h3>
            {Object.entries(groupedShows).map(([group, times]) => (
              <div class="format-section">
                <h4>{group}</h4>
                <div class="times-grid">
                  {times.map((time) => (
                    <a href="#" class="time-button">
                      {time}
                    </a>
                  ))}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p>No hay funciones programadas para esta película.</p>
        )
      }
    </div>
  </main>
</Layout>

<style>
  .showtimes-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 2rem;
    color: black;
  }
  .cinema-section {
    background-color: #f9f9f9;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
  }
  .cinema-section h3 {
    background-color: #3b4a6e;
    color: white;
    padding: 1rem;
    border-radius: 8px 8px 0 0;
    font-size: 1.25rem;
  }
  .format-section {
    padding: 1rem;
    border-bottom: 1px solid #e0e0e0;
  }
  .format-section:last-child {
    border-bottom: none;
  }
  .format-section h4 {
    color: #555;
    font-weight: normal;
    margin-bottom: 1rem;
  }
  .times-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  .time-button {
    background-color: white;
    border: 1px solid #ccc;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    color: #333;
    transition: all 0.2s ease;
  }
  .time-button:hover {
    background-color: #1a88c7;
    color: white;
    border-color: #1a88c7;
  }
</style>
