---
// src/pages/movie/[id].astro
import '../../styles/movie-id.css';
import Layout from '../../layouts/Layout.astro';
import { tmdbService } from '../../services/tmdbService';
import type { TMDBVideo } from '../../types/movies';
export const prerender = false;

const { id } = Astro.params;
if (!id) {
  return Astro.redirect('/404');
}

const movie = await tmdbService.getMovieDetails(Number(id));
const videosResponse = await tmdbService.getMovieVideos(Number(id));
const trailer =
  videosResponse.results.find(
    (video: TMDBVideo) =>
      video.site === 'YouTube' && video.type === 'Trailer' && video.official
  ) ||
  videosResponse.results.find(
    (video: TMDBVideo) => video.site === 'YouTube' && video.type === 'Trailer'
  );
const posterUrl = movie.poster_path
  ? tmdbService.getImageUrl(movie.poster_path)
  : '/placeholder-movie.png';
const backdropUrl = movie.backdrop_path
  ? tmdbService.getImageUrl(movie.backdrop_path, 'large')
  : '';

// --- MODIFICACIÓN AQUÍ ---
// Estructura para almacenar horarios agrupados por formato/variante,
// incluyendo showId y timetableId
interface TimeInfo {
  time: string;
  timetableId: number;
}
interface ShowGroup {
  showId: number; // ID de la función (Show)
  times: TimeInfo[];
}
let groupedShows: { [key: string]: ShowGroup } = {};

try {
  // Asegúrate que la URL del backend sea correcta
  const showsResponse = await fetch(
    `http://localhost:3000/api/show/by-movie/${id}`
  );
  if (showsResponse.ok) {
    const showsData = await showsResponse.json();
    showsData.data.forEach((show: any) => {
      // Asegúrate que show.timetables exista y sea un array
      if (
        show.timetables &&
        Array.isArray(show.timetables) &&
        show.timetables.length > 0
      ) {
        // Asegúrate que show.showCat y show.variant existan
        const categoryDesc =
          show.showCat?.description || 'Categoría Desconocida';
        const variantDesc = show.variant || 'Idioma Desconocido';
        const groupKey = `${categoryDesc} - ${variantDesc}`;

        if (!groupedShows[groupKey]) {
          // Inicializa el grupo con el showId y un array vacío de horarios
          groupedShows[groupKey] = { showId: show.id, times: [] };
        }

        // Añade cada horario con su ID al array 'times' del grupo
        show.timetables.forEach((tt: any) => {
          // Verifica que tt.id y tt.time existan
          if (tt && tt.id !== undefined && tt.time !== undefined) {
            groupedShows[groupKey].times.push({
              time: tt.time.substring(0, 5), // Formato HH:MM
              timetableId: tt.id,
            });
          }
        });
        // Opcional: Ordenar los horarios cronológicamente
        groupedShows[groupKey].times.sort((a, b) =>
          a.time.localeCompare(b.time)
        );
      }
    });
  } else {
    console.error('Error fetching shows:', showsResponse.statusText);
  }
} catch (error) {
  console.error('Error fetching or processing shows:', error);
}
// --- FIN DE LA MODIFICACIÓN ---
---

<Layout title={movie.title}>
  <div
    class="backdrop"
    style={`background-image: linear-gradient(to right, rgba(10, 25, 41, 1) 20%, rgba(10, 25, 41, 0.7) 50%, rgba(10, 25, 41, 1) 100%), url(${backdropUrl})`}
  >
  </div>
  <main class="movie-detail-container">
    <div class="detail-grid">
      <div class="main-content">
        <h1>{movie.title}</h1>
        <div class="meta-info">
          <span>{movie.runtime} min</span><span>•</span>
          <span>{movie.genres.map((g) => g.name).join(', ')}</span><span>•</span
          >
          <span>{new Date(movie.release_date).getFullYear()}</span>
        </div>
        <p class="synopsis">{movie.overview}</p>

        {
          trailer && (
            <div class="trailer-container">
              <h3>Trailer Oficial</h3>
              <iframe
                src={`https://www.youtube.com/embed/${trailer.key}`}
                title="YouTube video player"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen
              />
            </div>
          )
        }
      </div>

      <aside class="sidebar-content">
        <img
          src={posterUrl}
          alt={`Póster de ${movie.title}`}
          class="detail-poster"
        />
        <div class="data-sheet">
          <h4>Ficha Técnica</h4>
          <ul>
            <li><strong>Título Original:</strong> {movie.original_title}</li>
            <li>
              <strong>Estreno:</strong>
              {
                new Date(movie.release_date).toLocaleDateString('es-AR', {
                  timeZone: 'UTC',
                })
              }
            </li>
            <li><strong>Duración:</strong> {movie.runtime} min</li>
            <li>
              <strong>Calificación:</strong>
              {movie.vote_average.toFixed(1)} / 10
            </li>
          </ul>
        </div>
      </aside>
    </div>

    <div class="showtimes-container">
      <h2>Horarios Disponibles</h2>
      {
        Object.keys(groupedShows).length > 0 ? (
          <div class="cinema-section">
            <h3>CineVerse Rosario</h3>
            {/* --- MODIFICACIÓN AQUÍ --- */}
            {Object.entries(groupedShows).map(([group, showGroup]) => (
              <div class="format-section">
                <h4>{group}</h4>
                <div class="times-grid">
                  {/* Itera sobre los objetos timeInfo que ahora contienen time y timetableId */}
                  {showGroup.times.map((timeInfo) => (
                    // Construye la URL con showId y timetableId
                    <a
                      href={`/purchase/${showGroup.showId}/${timeInfo.timetableId}`}
                      class="time-button"
                    >
                      {timeInfo.time}
                    </a>
                  ))}
                </div>
              </div>
            ))}
            {/* --- FIN DE LA MODIFICACIÓN --- */}
          </div>
        ) : (
          <p>No hay funciones programadas para esta película.</p>
        )
      }
    </div>
  </main>
</Layout>
